;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Abui
;;; created at:
;;;     Wed Apr 26 21:26:00 UTC 2017
;;; based on Matrix customization system version of:
;;;     Tue Apr 25 03:52:37 UTC 2017
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

png :+ [ ALIENABLE bool,
    PERNUM pernum ].

; This grammar includes head-modifier rules.  To keep
; out extraneous parses, constrain the value of MOD on
; various subtypes of head.  This may need to be loosened later.
; This constraint says that only adverbs, adjectives,
; and adpositions can be modifiers.

+nvcdmo :+ [ MOD < > ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Pernum

pernum := *top*.
sg := pernum.
pl := pernum.
1st := pernum.
2nd := pernum.
3rd := pernum.
1sg := 1st & sg.
2sg := 2nd & sg.
3sg := 3rd & sg.
1pl := 1st & pl.
1pl_incl := 1pl.
1pl_excl := 1pl.
2pl := 2nd & pl.
3pl := 3rd & pl.

;;; Aspect

perfective := aspect.
imperfective := aspect.
durative := aspect.
punctual := aspect.
perfect := aspect.
inceptive_inchoative := aspect.
inceptive_completive := aspect.
phasal_inchoative := aspect.
phasal_completive := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-initial &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

noun-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ].

pron-noun-lex := no-spr-noun-lex.

1sg-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg ].

1pl_excl-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_excl ].

1pl_incl-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_incl ].

2sg-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg ].

2pl-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl ].

3-noun-lex := pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ].

alienable-noun-noun-lex := noun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.ALIENABLE + ].

inalienable-noun-noun-lex := noun-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.ALIENABLE - ].

wh-noun-noun-lex := no-spr-noun-lex.

;;; Verbs

; verb-lex is HC-LIGHT - to allow us to pick out
; 
;   lexical Vs for V-level attachment of negative adverbs.

verb-lex := basic-verb-lex & non-mod-lex-item &
  [ ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ],
    SYNSEM.LOCAL [ CONT.HOOK.XARG #xarg,
                   CAT [ VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ],
                         HC-LIGHT - ] ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

intr-verb-verb-lex := intransitive-verb-lex.

trans-verb-verb-lex := transitive-verb-lex.

;;; Adjectives

adj-lex := basic-intersective-adjective-lex &
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

attrib-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                              VAL.SPR cons ] ] > ].

predic-adj-lex := adj-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                            CAT [ VAL [ SPR < >,
                                                        COMPS < > ],
                                                  HEAD noun ] ] ] >,
                   CONT.HOOK.XARG #xarg ] ].

adj-adj-lex := attrib-adj-lex & predic-adj-lex.

irreg-adj-lex := attrib-adj-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ < > ].

; TODO adjectives currently allow adverbs as specifiers

;;; Adverbs

adv-lex := basic-int-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD -,
                       HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
                       VAL [ COMPS < >,
                             SUBJ < >,
                             SPR < > ] ] ].

; TODO position of adverb relative to arguments

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

dem-determiner-lex := determiner-lex & no-icons-lex-item.

; Type for negative adverbs.
; 
; This adverb should go through a specialized phrase structure rule
;        included with this grammar.

neg-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       POSTHEAD +,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
                                                VAL [ SUBJ cons,
                                                      COMPS null ] ] ] > ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

prefixed := inflected &
  [ PRON-PERNUM pernum,
    PRON-CLASS pron-class ].

pron-class := *top*.
class-i-iii := pron-class &
  [ NOUN-AL bool ].
class-i := class-i-iii &
  [ NOUN-AL + ].
class-iii := class-i-iii &
  [ NOUN-AL - ].
class-ii := pron-class.

;;; Lexical rule types

pron-prefix-lex-rule-super := infl-lex-rule &
  [ SYNSEM #ss,
    DTR.SYNSEM #ss & [ LOCAL.CAT.HEAD +nv ],
    INFLECTED prefixed ].

i-1sg-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1sg,
                PRON-CLASS class-i ] ].

ii-1sg-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1sg,
                PRON-CLASS class-ii ] ].

iii-1sg-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1sg,
                PRON-CLASS class-iii ] ].

i-2sg-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 2sg,
                PRON-CLASS class-i ] ].

ii-2sg-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 2sg,
                PRON-CLASS class-ii ] ].

iii-2sg-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 2sg,
                PRON-CLASS class-iii ] ].

i-iii-1pl_excl-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1pl_excl,
                PRON-CLASS class-i-iii ] ].

ii-1pl_excl-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1pl_excl,
                PRON-CLASS class-ii ] ].

i-iii-1pl_incl-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1pl_incl,
                PRON-CLASS class-i-iii ] ].

ii-1pl_incl-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1pl_incl,
                PRON-CLASS class-ii ] ].

i-iii-2pl-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 2pl,
                PRON-CLASS class-i-iii ] ].

ii-2pl-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 2pl,
                PRON-CLASS class-ii ] ].

i-3i-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-i ] ].

ii-3i-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-ii ] ].

iii-3i-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-iii ] ].

i-3ii-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-i ] ].

ii-3ii-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-ii ] ].

iii-3ii-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-iii ] ].

i-distr-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-i ] ].

ii-distr-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-ii ] ].

iii-distr-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-iii ] ].

u-agr-lex-rule := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED infl-satisfied,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM #pn,
    DTR pron-prefix-lex-rule-super & [ INFLECTED.PRON-PERNUM #pn ] ].

poss-lex-rule := const-lex-rule &
  [ INFLECTED infl-satisfied,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.ALIENABLE #al,
    DTR.INFLECTED [ PRON-PERNUM pernum,
                    PRON-CLASS.NOUN-AL #al ] ].

asp1-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR verb-lex ].

perfective-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

imperfective-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective ].

durative-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT durative ].

punctual-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT punctual ].

perfect-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfect ].

inceptive_inchoative-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT inceptive_inchoative ].

inceptive_completive-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT inceptive_completive ].

phasal_inchoative-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT phasal_inchoative ].

phasal_completive-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT phasal_completive ].

irreg-adj-predicative-lex-rule := subj-change-only-lex-rule & no-ccont-lex-rule & infl-lex-rule & predic-adj-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < >,
    DTR irreg-adj-lex ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

n2-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 2

vp2-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 3

n3-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

n3-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 3

vp3-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 4

n4-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

n4-bottom-coord-rule := unary-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "4",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 4

vp4-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-bottom-coord-rule := unary-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "4",
                   COORD-REL.PRED "_and_coord_rel" ] ].
