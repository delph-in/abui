;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Abui
;;; created at:
;;;     Wed Apr 26 21:26:00 UTC 2017
;;; based on Matrix customization system version of:
;;;     Tue Apr 25 03:52:37 UTC 2017
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

png :+ [ ALIENABLE bool,
    PERNUM pernum ].

; This grammar includes head-modifier rules.  To keep
; out extraneous parses, constrain the value of MOD on
; various subtypes of head.  This may need to be loosened later.
; This constraint says that only adverbs, adjectives,
; and adpositions can be modifiers.

+nvcdmo :+ [ MOD < > ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

head-opt-subj-phrase := basic-head-opt-subj-phrase & head-compositional &
  [ HEAD-DTR.SYNSEM.LOCAL [ CAT.VAL.COMPS < >,
                            CONT.HOOK [ INDEX #index & [ SF prop-or-ques ],
                                        ICONS-KEY.IARG1 #index,
                                        CLAUSE-KEY #index ]]].

basic-head-opt-comp-phrase :+
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD +vj ].

; Allow events to have COG-ST
individual :+ [ COG-ST cog-st ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Pernum

pernum := *top*.
sg := pernum.
pl := pernum.
1st := pernum.
2nd := pernum.
3rd := pernum.
1sg := 1st & sg.
2sg := 2nd & sg.
3sg := 3rd & sg.
1pl := 1st & pl.
1pl_incl := 1pl.
1pl_excl := 1pl.
2pl := 2nd & pl.
3pl := 3rd & pl.

;;; Aspect

no-aspect := aspect.
perfective := aspect.
imperfective := aspect.
durative := aspect.
punctual := aspect.
perfect := aspect.
inceptive_inchoative := aspect.
inceptive_completive := aspect.
phasal_inchoative := aspect.
phasal_completive := aspect.

;;; Case

case := *top*.
agentive := case.
non-agentive := case.

ref-ind :+
  [ CASE case ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT [ VAL [ SPR < #spr &
                                     [ LOCAL.CAT.HEAD det ] >,
                               COMPS < >,
                               SUBJ < >,
                               SPEC < > ],
                         HEAD noun ],
                   CONT.HOOK.INDEX.PNG.PERNUM 3rd ],
    ARG-ST < #spr > ].

alienable-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.ALIENABLE +,
    INFLECTED infl-satisfied ].

inalienable-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.ALIENABLE -,
    INFLECTED.NEEDS-PREFIX + ].

; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-initial &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

;;; Agent markers

agent-lex := raise-sem-lex-item & basic-one-arg & 
  [ ARG-ST.FIRST #comp & [ LOCAL.CAT [ HEAD noun,
                                       VAL [ COMPS < >,
                                             SPR < >,
                                             SUBJ < > ] ] ],
    SYNSEM.LOCAL [ CAT [ VAL [ COMPS < #comp >,
                               SPR < >,
                               SUBJ < >,
                               SPEC < > ],
                         HEAD adp & [ MOD < > ] ],
                   CONT.HOOK.INDEX.CASE agentive ] ].

; (like basic-head-opt-comp-phrase, but with ref-ind, instead of an event)
agent-opt-np-phrase := head-valence-phrase & head-only & head-compositional &
  [ INFLECTED #infl,
    SYNSEM canonical-synsem &
              [ LOCAL.CAT [ VAL [ SUBJ #subj,
                                  COMPS #comps,
                                  SPR #spr,
                                  SPEC #spec ],
                            MC #mc,
                            POSTHEAD #ph ],
                MODIFIED #mod ],
    HEAD-DTR [ INFLECTED #infl & infl-satisfied,
               SYNSEM [ LOCAL [ CAT [ VAL [ SUBJ #subj,
                                            COMPS < unexpressed &
                                                    [ OPT +,
                                                      OPT-CS #def,
                                                      LOCAL.CONT.HOOK [ INDEX #index & [ COG-ST #def ],
                                                                        ICONS-KEY #ikey,
                                                                        CLAUSE-KEY #ckey ] ] . #comps >,
                                            SPR #spr,
                                            SPEC #spec ],
                                      MC #mc,
                                      POSTHEAD #ph ],
                                CONT.HOOK.INDEX ref-ind ],
                        MODIFIED #mod ] ],
    C-CONT [ RELS <! !>,
             HCONS <! !>,
             ICONS <! #ikey & non-focus & [ IARG1 #ckey,
                                            IARG2 #index ] !> ] ].

1sg-agent-lex := agent-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1sg ].

1pl_excl-agent-lex := agent-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_excl ].

1pl_incl-agent-lex := agent-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1pl_incl ].

2sg-agent-lex := agent-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2sg ].

2pl-agent-lex := agent-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2pl ].

3-agent-lex := agent-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3rd ].

;;; Verbs

; verb-lex is HC-LIGHT - to allow us to pick out
; lexical Vs for V-level attachment of negative adverbs.

verb-lex := basic-verb-lex & non-mod-lex-item &
  [ ARG-ST < #subj & [ LOCAL [ CAT [ VAL [ SPR < >,
                                           COMPS < > ],
                                     HEAD +np ],
                               CONT.HOOK.INDEX #xarg & [ CASE agentive ] ] ]  ; TODO introduce verb classes
             . #comps >,
    SYNSEM.LOCAL [ CONT.HOOK.XARG #xarg,
                   CAT [ VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj >,
                               COMPS #comps ],
                         HC-LIGHT - ] ] ].

intr-verb-lex := verb-lex & intransitive-lex-item &
  [ ARG-ST.REST < > ].

trans-verb-lex := verb-lex & transitive-lex-item &
  [ ARG-ST.REST < [ LOCAL.CAT [ VAL [ SPR < >,
                                      COMPS < > ],
                                HEAD noun ] ] > ].

quant-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

clause-embedding-verb-lex := verb-lex & clausal-second-arg-trans-lex-item & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comp >,
    ARG-ST.REST.FIRST #comp & 
                      [ LOCAL [ CAT [ HEAD +vc,
                                      VAL [ COMPS < >,
                                            SPR < >,
                                            SUBJ < > ] ],
                                CONT.HOOK.INDEX.SF prop-or-ques ] ] ].

prop-embedding-verb-lex := clause-embedding-verb-lex &
  [ ARG-ST.REST.FIRST.LOCAL.CONT.HOOK.INDEX.SF prop ].

ques-embedding-verb-lex := clause-embedding-verb-lex & 
  [ ARG-ST.REST.FIRST.LOCAL.CONT.HOOK.INDEX.SF ques ].

comp-lex := raise-sem-lex-item & basic-one-arg & 
  [ ARG-ST.FIRST #comp & [ LOCAL.CAT [ HEAD verb,
                                       VAL [ COMPS < >,
                                             SPR < >,
                                             SUBJ < > ] ] ],
    SYNSEM.LOCAL [ CAT [ VAL [ COMPS < #comp >,
                               SPR < >,
                               SUBJ < >,
                               SPEC < > ],
                         HEAD comp & [ MOD < > ] ],
                   CONT.HOOK.INDEX.SF prop ] ].

;;; Adjectives

adj-lex := basic-intersective-adjective-lex &
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

attrib-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                              VAL.SPR cons ] ] > ].

predic-adj-lex := adj-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                            CAT [ VAL [ SPR < >,
                                                        COMPS < > ],
                                                  HEAD noun ] ] ] >,
                   CONT.HOOK.XARG #xarg ] ].

adj-adj-lex := attrib-adj-lex & predic-adj-lex.

irreg-adj-lex := attrib-adj-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ < > ].

;;; Adverbs

adv-lex := basic-int-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD -,
                       HEAD.MOD < [ LOCAL.CAT.HEAD +vj ] >,
                       VAL [ COMPS < >,
                             SUBJ < >,
                             SPR < >,
                             SPEC < > ] ] ].

; TODO position of adverb relative to arguments
; TODO adverbs can modifiy attributive adjectives?

;;; Numbers

num-lex := basic-int-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD +,
                       HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
                       VAL [ COMPS < >,
                             SUBJ < >,
                             SPR < >,
                             SPEC < > ] ] ].

;;; "Anaphoric demonstratives"
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

raw := inflected.

dem-lex := lex-item &
  [ DEM-COG-ST cog-st,
    ADDRS-VIEWPOINT bool,
    SYNSEM.LOCAL.CAT.HEAD +rd,
    INFLECTED raw ].

speak-dem-lex := dem-lex &
  [ ADDRS-VIEWPOINT - ].
addrs-dem-lex := dem-lex &
  [ ADDRS-VIEWPOINT + ].

prx-dem-lex := dem-lex &
  [ DEM-COG-ST activ-or-more ].
med-dem-lex := dem-lex &
  [ DEM-COG-ST activ+fam ].

prx-sp-dem-lex := prx-dem-lex & speak-dem-lex.
prx-ad-dem-lex := prx-dem-lex & addrs-dem-lex.
med-sp-dem-lex := med-dem-lex & speak-dem-lex.
med-ad-dem-lex := med-dem-lex & addrs-dem-lex.

uniq-id-dem-lex := dem-lex &
  [ DEM-COG-ST uniq-id ].
type-id-dem-lex := dem-lex &
  [ DEM-COG-ST type-id ].

determiner-lex-rule := basic-determiner-lex & norm-zero-arg & non-mod-lex-item & no-icons-lex-item & const-lex-rule &
  [ SYNSEM [ LKEYS.KEYREL.PRED "exist_q_rel",
             LOCAL [ CAT.VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < > ],
                     CONT.HOOK.INDEX [ SPECI +,
                                       COG-ST #cog-st ] ] ],
    DTR dem-lex & [ DEM-COG-ST #cog-st ] ].
; TODO do something with ADDRS-VIEWPOINT

clause-final-dem-lex-rule := no-rels-hcons-icons-lex-item & const-lex-rule &
  [ SYNSEM [ LOCAL.CAT [ HEAD adv &
                              [ MOD < [ LOCAL intersective-mod &
                                              [ CONT.HOOK.INDEX.COG-ST #cog-st,
                                                CAT [ HEAD +vj,
                                                      VAL [ SUBJ < >,
                                                            COMPS < > ] ] ],
                                        MODIFIED notmod ] > ],
                         VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < >,
                               SPEC < > ],
                         POSTHEAD + ] ],
    DTR dem-lex & [ DEM-COG-ST #cog-st ] ].

; Type for negative adverbs.
; 
; This adverb should go through a specialized phrase structure rule
;        included with this grammar.

neg-adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       POSTHEAD +,
                       HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
                                                VAL [ SUBJ cons,
                                                      COMPS null ] ] ] > ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

; Three series of prefixes
; On nouns, they indicate possession
; On verbs, they indicate agreement

; These features record if we need or have a prefix

inflected :+
  [ NEEDS-PREFIX luk,
    PREFIXED luk ].

infl-satisfied :+
  [ NEEDS-PREFIX na-or-- ].

; Prefixing is done through two lexical rules
; The first rule adds information, with the following type
; The second rule uses the information

prefixed := inflected &
  [ PREFIXED +,
    PRON-PERNUM pernum,
    PRON-CLASS pron-class ].

; These are the prefix classes

pron-class := *top*.
class-i-iii := pron-class &
  [ NOUN-AL bool ].
class-i := class-i-iii &
  [ NOUN-AL + ].
class-iii := class-i-iii &
  [ NOUN-AL - ].
class-ii := pron-class.

;;; Lexical rule types

; These rules add the pernum and class values
; A second rule will use the values appropriately

pron-prefix-lex-rule-super := infl-lex-rule &
  [ SYNSEM #ss,
    DTR [ SYNSEM #ss & [ LOCAL.CAT.HEAD +nv ],
          INFLECTED.PREFIXED - ],
    INFLECTED prefixed ].

i-1sg-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1sg,
                PRON-CLASS class-i ] ].

ii-1sg-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1sg,
                PRON-CLASS class-ii ] ].

iii-1sg-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1sg,
                PRON-CLASS class-iii ] ].

i-2sg-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 2sg,
                PRON-CLASS class-i ] ].

ii-2sg-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 2sg,
                PRON-CLASS class-ii ] ].

iii-2sg-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 2sg,
                PRON-CLASS class-iii ] ].

i-iii-1pl_excl-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1pl_excl,
                PRON-CLASS class-i-iii ] ].

ii-1pl_excl-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1pl_excl,
                PRON-CLASS class-ii ] ].

i-iii-1pl_incl-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1pl_incl,
                PRON-CLASS class-i-iii ] ].

ii-1pl_incl-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 1pl_incl,
                PRON-CLASS class-ii ] ].

i-iii-2pl-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 2pl,
                PRON-CLASS class-i-iii ] ].

ii-2pl-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 2pl,
                PRON-CLASS class-ii ] ].

i-3i-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-i ] ].

ii-3i-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-ii ] ].

iii-3i-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-iii ] ].

i-3ii-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-i ] ].

ii-3ii-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-ii ] ].

iii-3ii-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-iii ] ].

i-distr-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-i ] ].

ii-distr-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-ii ] ].

iii-distr-lex-rule := pron-prefix-lex-rule-super &
  [ INFLECTED [ PRON-PERNUM 3rd,
                PRON-CLASS class-iii ] ].

; Rules which use the pernum value from the above

u-agr-lex-rule := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED.PREFIXED +,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM #pn,
    DTR pron-prefix-lex-rule-super & [ INFLECTED.PRON-PERNUM #pn ] ].

embed-agr-lex-rule := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED.PREFIXED +,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD +vc,
    DTR pron-prefix-lex-rule-super & [ INFLECTED.PRON-PERNUM 3rd ] ].

pos-lex-rule := const-lex-rule & same-head-lex-rule & subj-change-only-lex-rule
  [ INFLECTED.PREFIXED +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ < [ LOCAL [ CONT.HOOK.INDEX #poss & [ PNG.PERNUM #pn ],
                                          CAT [ HEAD noun,
                                                VAL [ SPR < >,
                                                      SUBJ < >,
                                                      SPEC < >,
                                                      COMPS < > ] ] ] ] >,
    C-CONT [ HOOK [ INDEX #index,
                    LTOP #lbl ],
             RELS <! arg12-ev-relation & [ PRED "poss_rel",
                                           LBL #lbl,
                                           ARG1 #index,
                                           ARG2 #poss ] !>,
             HCONS <! !>,
             ICONS <! !> ],
    DTR pron-prefix-lex-rule-super & [ INFLECTED [ PRON-PERNUM #pn,
                                                   PRON-CLASS.NOUN-AL #al ],
                                       SYNSEM.LOCAL [ CAT.VAL.SUBJ < >,
                                                      CONT.HOOK [ INDEX #index & [ COG-ST uniq+fam+act,
                                                                                   PNG.ALIENABLE #al ],
                                                                  LTOP #lbl ] ] ] ].

; Aspect markers

asp1-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR verb-lex ].

perfective-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

imperfective-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective ].

durative-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT durative ].

punctual-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT punctual ].

perfect-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfect ].

inceptive_inchoative-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT inceptive_inchoative ].

inceptive_completive-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT inceptive_completive ].

phasal_inchoative-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT phasal_inchoative ].

phasal_completive-lex-rule := asp1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT phasal_completive ].

; Suffix for irregular adjectives

irreg-adj-predicative-lex-rule := subj-change-only-lex-rule & no-ccont-lex-rule & infl-lex-rule & predic-adj-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < >,
    DTR irreg-adj-lex ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;;; Verbal phrases

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD noun ].

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD +vc ].

subj-head-phrase := head-final & head-valence-phrase & head-compositional &
  [ SYNSEM phr-synsem &
           [ LOCAL.CAT [ POSTHEAD +,
                 HC-LIGHT -,
                 VAL [ SUBJ < >,
                       COMPS #comps,
                       SPR #spr ] ] ],
    C-CONT [ HOOK.INDEX.SF prop-or-ques,
         RELS <! !>,
         HCONS <! !>,
         ICONS <! !> ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.VAL [ SUBJ < #synsem >,
                    COMPS #comps & < >,
                    SPR #spr ],
    NON-HEAD-DTR.SYNSEM #synsem & canonical-synsem &
       [ LOCAL [ CAT [ VAL [ SUBJ olist,
                 COMPS olist,
                 SPR olist ] ] ],
         NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
             REL 0-dlist ] ]].

;;; Nominal phrases

; Bare NP phrase.
; We may consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in Abui.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

; Nominal predicates (zero copula)

np-predicate-rule := unary-phrase & nocoord &
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
                       VAL [ COMPS < >,
                             SUBJ < [ LOCAL [ CONT.HOOK.INDEX #arg1,
                                              CAT [ HEAD noun,
                                                    VAL.SPR < > ] ] ] >,
                             SPR < > ] ],
    C-CONT [ HOOK [ LTOP #ltop,
                    INDEX #index,
                    XARG #arg1 ],
             RELS <! arg12-ev-relation &
                   [ PRED "_be_v_id_rel",
                     LBL #ltop,
                     ARG0 #index,
                     ARG1 #arg1,
                     ARG2 #arg2 ] !>,
             HCONS <! !>,
             ICONS <! !> ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD noun,
                                  VAL [ SPR < >,
                                        COMPS < >,
                                        SUBJ < > ] ],
                            CONT.HOOK.INDEX #arg2 ] ] > ].

; Possessives

pos-phrase := basic-head-subj-phrase & head-final & 
  [ SYNSEM.LOCAL.CAT.HEAD noun ].

; (like basic-head-opt-subj-phrase, but with ref-ind, instead of an event)
pos-opt-subj-phrase := head-valence-phrase & head-only & head-compositional &
  [ INFLECTED #infl,
    SYNSEM canonical-synsem &
              [ LOCAL.CAT [ VAL [ SUBJ < >,
                                  COMPS #comps,
                                  SPR #spr,
                                  SPEC #spec ],
                            POSTHEAD #ph ],
                MODIFIED #mod ],
    HEAD-DTR [ INFLECTED #infl & infl-satisfied,
               SYNSEM [ LOCAL [ CAT [ HEAD.MOD olist,
                                      VAL [ SUBJ < unexpressed-reg &
                                                   [ OPT +,
                                                     LOCAL.CONT.HOOK [ INDEX #index & [ COG-ST in-foc ],
                                                                       ICONS-KEY #ikey,
                                                                       CLAUSE-KEY #ckey ] ] >,
                                            COMPS #comps,
                                            SPR #spr,
                                            SPEC #spec ],
                                      POSTHEAD #ph ],
                                CONT.HOOK.INDEX ref-ind ],
                        MODIFIED #mod ] ],
    C-CONT [ RELS <! !>,
             HCONS <! !>,
             ICONS <! #ikey & non-focus & [ IARG1 #ckey,
                                            IARG2 #index ] !> ] ].

; To avoid spurious ambiguity with possessed nouns (require empty SUBJ),
; and to block adjectives combining first predicatively then attributively (PRD value):

head-adj-int-phrase :+
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ < >,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.PRD - ].

n-coord-phrase :+
  [ LCOORD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ < >,
    RCOORD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ < > ].

head-spec-phrase :+
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ < > ].

subj-head-phrase :+
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ < >,
    HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.PRD + ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

n2-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 2

vp2-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 3

n3-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

n3-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 3

vp3-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 4

n4-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

n4-bottom-coord-rule := unary-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "4",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 4

vp4-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-bottom-coord-rule := unary-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "4",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Wh words

wh-pronoun-lex := norm-hook-lex-item & basic-icons-lex-item & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun,
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < >,
                                 SPEC < > ] ],
                     CONT [ HOOK.INDEX.PNG.PERNUM 3rd,
                            RELS <! [ LBL #larg,
                                      ARG0 #ind & ref-ind ],
                                    [ PRED "wh_q_rel",
                                      ARG0 #ind,
                                      RSTR #harg ] !>,
                            HCONS <! [ HARG #harg,
                                       LARG #larg ] !> ] ],
             NON-LOCAL.QUE <! #ind !> ] ].

wh-int-cl-rule := clause & head-compositional & head-only &
  [ SYNSEM [ LOCAL.CAT [ VAL #val,
                         MC bool ],
             NON-LOCAL non-local-none ],
    C-CONT [ RELS <! !>,
             HCONS <! !>,
             HOOK.INDEX.SF ques ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT [ HEAD verb,
                                  VAL #val & 
                                    [ SUBJ < >,
                                      COMPS < > ] ],
                      NON-LOCAL [ SLASH <! !>,
                                  REL <! !>,
                                  QUE <! ref-ind !> ] ] ].
